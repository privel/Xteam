import asyncio
import configparser
import json
import random

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import requests
from database import select_bit_button, get_info_user, minus_balance, select_button, get_chance_user, add_balance
from loader import dp, bot
from state.states import buy_course_btc
import asyncio

def curse_crypto(name_crypto):
    url = f'https://api.bittrex.com/v3/markets/{name_crypto}-USDT/ticker'
    return url


@dp.message_handler(text='üìä ECN –°—á–µ—Ç', state='*')
async def wqkejiwe(message: types.Message):
    try:
        block_stavka = get_info_user(user_id=message.from_user.id)[0][13]
        if block_stavka == 1:
            config = configparser.ConfigParser()
            config.read("settings.ini")
            support = config["Bot"]["support"]
            await message.answer(f'<b>‚ö† –í–∞–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ —Ç—Ä–µ–π–¥</b>\n'
                                 f'–£—Ç–æ—á–Ω–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ - {support}')
        else:
            photo = open('photo/enc.jpg', 'rb')
            markup = InlineKeyboardMarkup(row_width=2)
            all_button = select_bit_button()
            for i in all_button:
                markup.insert(
                    InlineKeyboardButton(text=f'{i[0]}', callback_data=f'{i[1]}')
                )
            await message.answer_photo(photo=photo,
                                       caption='üìà ECN —Å—á–µ—Ç\n\n'
                                               'üí† –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤:',
                                       reply_markup=markup)
            await buy_course_btc.q1.set()
    except Exception:
        pass

@dp.callback_query_handler(state=buy_course_btc.q1)
async def qweqwe(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    if call.data == 'b1':
        photo = open('photo/b1.jpg', 'rb')
        markup = InlineKeyboardMarkup(row_width=1)
        link = curse_crypto(name_crypto='BTC')
        j = requests.get(f'{link}')
        data = json.loads(j.text)
        price = float(data['askRate'])
        await state.update_data(price=price)
        markup.add(
            InlineKeyboardButton(text='–û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å', callback_data='b1'),
            InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel')
        )
        await call.message.answer_photo(photo=photo,
                                        caption='üåê –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å.\n\n'
                                                '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π - 1‚Ç∏\n'
                                                f'–ö—É—Ä—Å –º–æ–Ω–µ—Ç—ã - {price}$\n\n'
                                                f'–í–∞—à –¥–µ–Ω–µ–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å: {get_info_user(call.from_user.id)[0][2]}‚Ç∏',
                                        reply_markup=markup)
    if call.data == 'b2':
        photo = open('photo/b2.jpg', 'rb')
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(
            InlineKeyboardButton(text='–û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å', callback_data='b2'),
            InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel')
        )
        link = curse_crypto(name_crypto='ETH')
        j = requests.get(f'{link}')
        data = json.loads(j.text)
        price = float(data['askRate'])
        await state.update_data(price=price)
        await call.message.answer_photo(photo=photo,
                                        caption='üåê –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å.\n\n'
                                                '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π - 1‚Ç∏\n'
                                                f'–ö—É—Ä—Å –º–æ–Ω–µ—Ç—ã - {price}$\n\n'
                                                f'–í–∞—à –¥–µ–Ω–µ–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å: {get_info_user(call.from_user.id)[0][2]}‚Ç∏',
                                        reply_markup=markup)
    if call.data == 'b3':
        photo = open('photo/b3.jpg', 'rb')
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(
            InlineKeyboardButton(text='–û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å', callback_data='b3'),
            InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel')
        )
        link = curse_crypto(name_crypto='LTC')
        j = requests.get(f'{link}')
        data = json.loads(j.text)
        price = float(data['askRate'])
        await state.update_data(price=price)
        await call.message.answer_photo(photo=photo,
                                        caption='üåê –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å.\n\n'
                                                '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π - 1‚Ç∏\n'
                                                f'–ö—É—Ä—Å –º–æ–Ω–µ—Ç—ã - {price}$\n\n'
                                                f'–í–∞—à –¥–µ–Ω–µ–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å: {get_info_user(call.from_user.id)[0][2]}‚Ç∏',
                                        reply_markup=markup)
    if call.data == 'b4':
        photo = open('photo/b4.jpg', 'rb')
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(
            InlineKeyboardButton(text='–û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å', callback_data='b4'),
            InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel')
        )
        link = curse_crypto(name_crypto='ADA')
        j = requests.get(f'{link}')
        data = json.loads(j.text)
        price = float(data['askRate'])
        await state.update_data(price=price)
        await call.message.answer_photo(photo=photo,
                                        caption='üåê –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å.\n\n'
                                                '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π - 1‚Ç∏\n'
                                                f'–ö—É—Ä—Å –º–æ–Ω–µ—Ç—ã - {price}$\n\n'
                                                f'–í–∞—à –¥–µ–Ω–µ–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å: {get_info_user(call.from_user.id)[0][2]}‚Ç∏',
                                        reply_markup=markup)
    if call.data == 'b5':
        photo = open('photo/b5.jpg', 'rb')
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(
            InlineKeyboardButton(text='–û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å', callback_data='b5'),
            InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel')
        )
        link = curse_crypto(name_crypto='LUNA')
        j = requests.get(f'{link}')
        data = json.loads(j.text)
        price = float(data['askRate'])
        await state.update_data(price=price)
        await call.message.answer_photo(photo=photo,
                                        caption='üåê –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å.\n\n'
                                                '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π - 1‚Ç∏\n'
                                                f'–ö—É—Ä—Å –º–æ–Ω–µ—Ç—ã - {price}$\n\n'
                                                f'–í–∞—à –¥–µ–Ω–µ–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å: {get_info_user(call.from_user.id)[0][2]}‚Ç∏',
                                        reply_markup=markup)
    if call.data == 'b6':
        photo = open('photo/b6.jpg', 'rb')
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(
            InlineKeyboardButton(text='–û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å', callback_data='b6'),
            InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel')
        )
        link = curse_crypto(name_crypto='DOT')
        j = requests.get(f'{link}')
        data = json.loads(j.text)
        price = float(data['askRate'])
        await state.update_data(price=price)
        await call.message.answer_photo(photo=photo,
                                        caption='üåê –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å.\n\n'
                                                '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π - 1‚Ç∏\n'
                                                f'–ö—É—Ä—Å –º–æ–Ω–µ—Ç—ã - {price}$\n\n'
                                                f'–í–∞—à –¥–µ–Ω–µ–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å: {get_info_user(call.from_user.id)[0][2]}‚Ç∏',
                                        reply_markup=markup)
    if call.data == 'b7':
        photo = open('photo/b7.jpg', 'rb')
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(
            InlineKeyboardButton(text='–û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å', callback_data='b7'),
            InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel')
        )
        link = curse_crypto(name_crypto='MATIC')
        j = requests.get(f'{link}')
        data = json.loads(j.text)
        price = float(data['askRate'])
        await state.update_data(price=price)
        await call.message.answer_photo(photo=photo,
                                        caption='üåê –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å.\n\n'
                                                '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π - 1‚Ç∏\n'
                                                f'–ö—É—Ä—Å –º–æ–Ω–µ—Ç—ã - {price}$\n\n'
                                                f'–í–∞—à –¥–µ–Ω–µ–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å: {get_info_user(call.from_user.id)[0][2]}‚Ç∏',
                                        reply_markup=markup)
    if call.data == 'b8':
        photo = open('photo/b8.jpg', 'rb')
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(
            InlineKeyboardButton(text='–û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å', callback_data='b8'),
            InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel')
        )
        link = curse_crypto(name_crypto='QTUM')
        j = requests.get(f'{link}')
        data = json.loads(j.text)
        price = float(data['askRate'])
        await state.update_data(price=price)
        await call.message.answer_photo(photo=photo,
                                        caption='üåê –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å.\n\n'
                                                '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π - 1‚Ç∏\n'
                                                f'–ö—É—Ä—Å –º–æ–Ω–µ—Ç—ã - {price}$\n\n'
                                                f'–í–∞—à –¥–µ–Ω–µ–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å: {get_info_user(call.from_user.id)[0][2]}‚Ç∏',
                                        reply_markup=markup)
    if call.data == 'b9':
        photo = open('photo/b9.jpg', 'rb')
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(
            InlineKeyboardButton(text='–û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å', callback_data='b9'),
            InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel')
        )
        link = curse_crypto(name_crypto='TRX')
        j = requests.get(f'{link}')
        data = json.loads(j.text)
        price = float(data['askRate'])
        await state.update_data(price=price)
        await call.message.answer_photo(photo=photo,
                                        caption='üåê –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å.\n\n'
                                                '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π - 1‚Ç∏\n'
                                                f'–ö—É—Ä—Å –º–æ–Ω–µ—Ç—ã - {price}$\n\n'
                                                f'–í–∞—à –¥–µ–Ω–µ–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å: {get_info_user(call.from_user.id)[0][2]}‚Ç∏',
                                        reply_markup=markup)
    if call.data == 'b10':
        photo = open('photo/b10.jpg', 'rb')
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(
            InlineKeyboardButton(text='–û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å', callback_data='b10'),
            InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel')
        )
        link = curse_crypto(name_crypto='XRP')
        j = requests.get(f'{link}')
        data = json.loads(j.text)
        price = float(data['askRate'])
        await state.update_data(price=price)
        await call.message.answer_photo(photo=photo,
                                        caption='üåê –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å.\n\n'
                                                '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π - 1‚Ç∏\n'
                                                f'–ö—É—Ä—Å –º–æ–Ω–µ—Ç—ã - {price}$\n\n'
                                                f'–í–∞—à –¥–µ–Ω–µ–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å: {get_info_user(call.from_user.id)[0][2]}‚Ç∏',
                                        reply_markup=markup)
    if call.data == 'b11':
        photo = open('photo/b11.jpg', 'rb')
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(
            InlineKeyboardButton(text='–û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å', callback_data='b11'),
            InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel')
        )
        link = curse_crypto(name_crypto='SOL')
        j = requests.get(f'{link}')
        data = json.loads(j.text)
        price = float(data['askRate'])
        await state.update_data(price=price)
        await call.message.answer_photo(photo=photo,
                                        caption='üåê –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å.\n\n'
                                                '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π - 1‚Ç∏\n'
                                                f'–ö—É—Ä—Å –º–æ–Ω–µ—Ç—ã - {price}$\n\n'
                                                f'–í–∞—à –¥–µ–Ω–µ–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å: {get_info_user(call.from_user.id)[0][2]}‚Ç∏',
                                        reply_markup=markup)
    if call.data == 'b12':
        photo = open('photo/b12.jpg', 'rb')
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(
            InlineKeyboardButton(text='–û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å', callback_data='b12'),
            InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel')
        )
        link = curse_crypto(name_crypto='DOGE')
        j = requests.get(f'{link}')
        data = json.loads(j.text)
        price = float(data['askRate'])
        await state.update_data(price=price)
        await call.message.answer_photo(photo=photo,
                                        caption='üåê –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å.\n\n'
                                                '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π - 1‚Ç∏\n'
                                                f'–ö—É—Ä—Å –º–æ–Ω–µ—Ç—ã - {price}$\n\n'
                                                f'–í–∞—à –¥–µ–Ω–µ–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å: {get_info_user(call.from_user.id)[0][2]}‚Ç∏',
                                        reply_markup=markup)
    if call.data == 'b13':
        photo = open('photo/b13.jpg', 'rb')
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(
            InlineKeyboardButton(text='–û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å', callback_data='b13'),
            InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel')
        )
        link = curse_crypto(name_crypto='AVAX')
        j = requests.get(f'{link}')
        data = json.loads(j.text)
        price = float(data['askRate'])
        await state.update_data(price=price)
        await call.message.answer_photo(photo=photo,
                                        caption='üåê –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å.\n\n'
                                                '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π - 1‚Ç∏\n'
                                                f'–ö—É—Ä—Å –º–æ–Ω–µ—Ç—ã - {price}$\n\n'
                                                f'–í–∞—à –¥–µ–Ω–µ–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å: {get_info_user(call.from_user.id)[0][2]}‚Ç∏',
                                        reply_markup=markup)
    if call.data == 'b14':
        photo = open('photo/b14.jpg', 'rb')
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(
            InlineKeyboardButton(text='–û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å', callback_data='b14'),
            InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel')
        )
        link = curse_crypto(name_crypto='UNI')
        j = requests.get(f'{link}')
        data = json.loads(j.text)
        price = float(data['askRate'])
        await state.update_data(price=price)
        await call.message.answer_photo(photo=photo,
                                        caption='üåê –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å.\n\n'
                                                '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π - 1‚Ç∏\n'
                                                f'–ö—É—Ä—Å –º–æ–Ω–µ—Ç—ã - {price}$\n\n'
                                                f'–í–∞—à –¥–µ–Ω–µ–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å: {get_info_user(call.from_user.id)[0][2]}‚Ç∏',
                                        reply_markup=markup)
    await state.update_data(crypto=call.data)
    await buy_course_btc.q2.set()

@dp.callback_query_handler(state=buy_course_btc.q2)
async def mkqwe(call: types.CallbackQuery):
    await call.message.delete()
    await buy_course_btc.q1.set()
    if call.data == 'b1':
        photo = open('photo/b1.jpg', 'rb')
        markup = InlineKeyboardMarkup(row_width=1)
        link = curse_crypto(name_crypto='BTC')
        j = requests.get(f'{link}')
        data = json.loads(j.text)
        price = float(data['askRate'])
        markup.add(
            InlineKeyboardButton(text='–û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å', callback_data='b1'),
            InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel')
        )
        await call.message.answer_photo(photo=photo,
                                        caption='üåê –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å.\n\n'
                                                '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π - 1‚Ç∏\n'
                                                f'–ö—É—Ä—Å –º–æ–Ω–µ—Ç—ã - {price}$\n\n'
                                                f'–í–∞—à –¥–µ–Ω–µ–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å: {get_info_user(call.from_user.id)[0][2]}‚Ç∏',
                                        reply_markup=markup)
    if call.data == 'b2':
        photo = open('photo/b2.jpg', 'rb')
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(
            InlineKeyboardButton(text='–û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å', callback_data='b2'),
            InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel')
        )
        link = curse_crypto(name_crypto='ETH')
        j = requests.get(f'{link}')
        data = json.loads(j.text)
        price = float(data['askRate'])
        await call.message.answer_photo(photo=photo,
                                        caption='üåê –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å.\n\n'
                                                '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π - 1‚Ç∏\n'
                                                f'–ö—É—Ä—Å –º–æ–Ω–µ—Ç—ã - {price}$\n\n'
                                                f'–í–∞—à –¥–µ–Ω–µ–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å: {get_info_user(call.from_user.id)[0][2]}‚Ç∏',
                                        reply_markup=markup)
    if call.data == 'b3':
        photo = open('photo/b3.jpg', 'rb')
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(
            InlineKeyboardButton(text='–û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å', callback_data='b3'),
            InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel')
        )
        link = curse_crypto(name_crypto='LTC')
        j = requests.get(f'{link}')
        data = json.loads(j.text)
        price = data['askRate']
        await call.message.answer_photo(photo=photo,
                                        caption='üåê –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å.\n\n'
                                                '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π - 1‚Ç∏\n'
                                                f'–ö—É—Ä—Å –º–æ–Ω–µ—Ç—ã - {price}$\n\n'
                                                f'–í–∞—à –¥–µ–Ω–µ–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å: {get_info_user(call.from_user.id)[0][2]}‚Ç∏',
                                        reply_markup=markup)
    if call.data == 'b4':
        photo = open('photo/b4.jpg', 'rb')
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(
            InlineKeyboardButton(text='–û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å', callback_data='b4'),
            InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel')
        )
        link = curse_crypto(name_crypto='ADA')
        j = requests.get(f'{link}')
        data = json.loads(j.text)
        price = data['askRate']
        await call.message.answer_photo(photo=photo,
                                        caption='üåê –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å.\n\n'
                                                '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π - 1‚Ç∏\n'
                                                f'–ö—É—Ä—Å –º–æ–Ω–µ—Ç—ã - {price}$\n\n'
                                                f'–í–∞—à –¥–µ–Ω–µ–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å: {get_info_user(call.from_user.id)[0][2]}‚Ç∏',
                                        reply_markup=markup)
    if call.data == 'b5':
        photo = open('photo/b5.jpg', 'rb')
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(
            InlineKeyboardButton(text='–û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å', callback_data='b5'),
            InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel')
        )
        link = curse_crypto(name_crypto='LUNA')
        j = requests.get(f'{link}')
        data = json.loads(j.text)
        price = data['askRate']
        await call.message.answer_photo(photo=photo,
                                        caption='üåê –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å.\n\n'
                                                '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π - 1‚Ç∏\n'
                                                f'–ö—É—Ä—Å –º–æ–Ω–µ—Ç—ã - {price}$\n\n'
                                                f'–í–∞—à –¥–µ–Ω–µ–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å: {get_info_user(call.from_user.id)[0][2]}‚Ç∏',
                                        reply_markup=markup)
    if call.data == 'b6':
        photo = open('photo/b6.jpg', 'rb')
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(
            InlineKeyboardButton(text='–û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å', callback_data='b6'),
            InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel')
        )
        link = curse_crypto(name_crypto='DOT')
        j = requests.get(f'{link}')
        data = json.loads(j.text)
        price = data['askRate']
        await call.message.answer_photo(photo=photo,
                                        caption='üåê –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å.\n\n'
                                                '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π - 1‚Ç∏\n'
                                                f'–ö—É—Ä—Å –º–æ–Ω–µ—Ç—ã - {price}$\n\n'
                                                f'–í–∞—à –¥–µ–Ω–µ–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å: {get_info_user(call.from_user.id)[0][2]}‚Ç∏',
                                        reply_markup=markup)
    if call.data == 'b7':
        photo = open('photo/b7.jpg', 'rb')
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(
            InlineKeyboardButton(text='–û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å', callback_data='b7'),
            InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel')
        )
        link = curse_crypto(name_crypto='MATIC')
        j = requests.get(f'{link}')
        data = json.loads(j.text)
        price = data['askRate']
        await call.message.answer_photo(photo=photo,
                                        caption='üåê –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å.\n\n'
                                                '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π - 1‚Ç∏\n'
                                                f'–ö—É—Ä—Å –º–æ–Ω–µ—Ç—ã - {price}$\n\n'
                                                f'–í–∞—à –¥–µ–Ω–µ–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å: {get_info_user(call.from_user.id)[0][2]}‚Ç∏',
                                        reply_markup=markup)
    if call.data == 'b8':
        photo = open('photo/b8.jpg', 'rb')
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(
            InlineKeyboardButton(text='–û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å', callback_data='b8'),
            InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel')
        )
        link = curse_crypto(name_crypto='QTUM')
        j = requests.get(f'{link}')
        data = json.loads(j.text)
        price = data['askRate']
        await call.message.answer_photo(photo=photo,
                                        caption='üåê –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å.\n\n'
                                                '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π - 1‚Ç∏\n'
                                                f'–ö—É—Ä—Å –º–æ–Ω–µ—Ç—ã - {price}$\n\n'
                                                f'–í–∞—à –¥–µ–Ω–µ–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å: {get_info_user(call.from_user.id)[0][2]}‚Ç∏',
                                        reply_markup=markup)
    if call.data == 'b9':
        photo = open('photo/b9.jpg', 'rb')
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(
            InlineKeyboardButton(text='–û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å', callback_data='b9'),
            InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel')
        )
        link = curse_crypto(name_crypto='TRX')
        j = requests.get(f'{link}')
        data = json.loads(j.text)
        price = data['askRate']
        await call.message.answer_photo(photo=photo,
                                        caption='üåê –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å.\n\n'
                                                '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π - 1‚Ç∏\n'
                                                f'–ö—É—Ä—Å –º–æ–Ω–µ—Ç—ã - {price}$\n\n'
                                                f'–í–∞—à –¥–µ–Ω–µ–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å: {get_info_user(call.from_user.id)[0][2]}‚Ç∏',
                                        reply_markup=markup)
    if call.data == 'b10':
        photo = open('photo/b10.jpg', 'rb')
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(
            InlineKeyboardButton(text='–û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å', callback_data='b10'),
            InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel')
        )
        link = curse_crypto(name_crypto='XRP')
        j = requests.get(f'{link}')
        data = json.loads(j.text)
        price = data['askRate']
        await call.message.answer_photo(photo=photo,
                                        caption='üåê –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å.\n\n'
                                                '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π - 1‚Ç∏\n'
                                                f'–ö—É—Ä—Å –º–æ–Ω–µ—Ç—ã - {price}$\n\n'
                                                f'–í–∞—à –¥–µ–Ω–µ–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å: {get_info_user(call.from_user.id)[0][2]}‚Ç∏',
                                        reply_markup=markup)
    if call.data == 'b11':
        photo = open('photo/b11.jpg', 'rb')
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(
            InlineKeyboardButton(text='–û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å', callback_data='b11'),
            InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel')
        )
        link = curse_crypto(name_crypto='SOL')
        j = requests.get(f'{link}')
        data = json.loads(j.text)
        price = data['askRate']
        await call.message.answer_photo(photo=photo,
                                        caption='üåê –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å.\n\n'
                                                '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π - 1‚Ç∏\n'
                                                f'–ö—É—Ä—Å –º–æ–Ω–µ—Ç—ã - {price}$\n\n'
                                                f'–í–∞—à –¥–µ–Ω–µ–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å: {get_info_user(call.from_user.id)[0][2]}‚Ç∏',
                                        reply_markup=markup)
    if call.data == 'b12':
        photo = open('photo/b12.jpg', 'rb')
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(
            InlineKeyboardButton(text='–û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å', callback_data='b12'),
            InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel')
        )
        link = curse_crypto(name_crypto='DOGE')
        j = requests.get(f'{link}')
        data = json.loads(j.text)
        price = data['askRate']
        await call.message.answer_photo(photo=photo,
                                        caption='üåê –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å.\n\n'
                                                '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π - 1‚Ç∏\n'
                                                f'–ö—É—Ä—Å –º–æ–Ω–µ—Ç—ã - {price}$\n\n'
                                                f'–í–∞—à –¥–µ–Ω–µ–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å: {get_info_user(call.from_user.id)[0][2]}‚Ç∏',
                                        reply_markup=markup)
    if call.data == 'b13':
        photo = open('photo/b13.jpg', 'rb')
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(
            InlineKeyboardButton(text='–û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å', callback_data='b13'),
            InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel')
        )
        link = curse_crypto(name_crypto='AVAX')
        j = requests.get(f'{link}')
        data = json.loads(j.text)
        price = data['askRate']
        await call.message.answer_photo(photo=photo,
                                        caption='üåê –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å.\n\n'
                                                '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π - 1‚Ç∏\n'
                                                f'–ö—É—Ä—Å –º–æ–Ω–µ—Ç—ã - {price}$\n\n'
                                                f'–í–∞—à –¥–µ–Ω–µ–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å: {get_info_user(call.from_user.id)[0][2]}‚Ç∏',
                                        reply_markup=markup)
    if call.data == 'b14':
        photo = open('photo/b14.jpg', 'rb')
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(
            InlineKeyboardButton(text='–û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å', callback_data='b14'),
            InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel')
        )
        link = curse_crypto(name_crypto='UNI')
        j = requests.get(f'{link}')
        data = json.loads(j.text)
        price = data['askRate']
        await call.message.answer_photo(photo=photo,
                                        caption='üåê –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å.\n\n'
                                                '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π - 1‚Ç∏\n'
                                                f'–ö—É—Ä—Å –º–æ–Ω–µ—Ç—ã - {price}$\n\n'
                                                f'–í–∞—à –¥–µ–Ω–µ–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å: {get_info_user(call.from_user.id)[0][2]}‚Ç∏',
                                        reply_markup=markup)
    await buy_course_btc.q2.set()

@dp.message_handler(state=buy_course_btc.q2)
async def ikjqnwr(message: types.Message, state: FSMContext):
    try:
        if int(message.text) < 1:
            await message.answer('<b>‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥</b>')
            await state.finish()
        elif int(get_info_user(message.from_user.id)[0][2]) < int(message.text):
            await message.answer('<b>‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥</b>')
            await state.finish()
        else:
            await state.update_data(stavka=int(message.text))
            minus_balance(user_id=message.from_user.id, count=int(message.text))
            markup = InlineKeyboardMarkup(row_width=1)
            markup.add(
                InlineKeyboardButton(text='–í–≤–µ—Ä—Ö', callback_data='up'),
                InlineKeyboardButton(text='–ù–µ –∏–∑–º–µ–Ω–∏—Ç—Å—è', callback_data='no_change'),
                InlineKeyboardButton(text='–í–Ω–∏–∑', callback_data='down')
            )
            await message.answer('üóØ –ö—É–¥–∞ –ø–æ–π–¥–µ—Ç –∫—É—Ä—Å –∞–∫—Ç–∏–≤–∞?\n\n'
                                 'üìà –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã:\n'
                                 '–í–≤–µ—Ä—Ö - x2\n'
                                 '–ù–µ –∏–∑–º–µ–Ω–∏—Ç—Å—è - x10\n'
                                 '–í–Ω–∏–∑ - x2', reply_markup=markup)
            await buy_course_btc.q3.set()
    except Exception:
        await message.answer('<b>‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥</b>')
        await state.finish()

@dp.callback_query_handler(state=buy_course_btc.q3)
async def qweqw(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    await state.update_data(result=call.data)
    data = await state.get_data()
    stavka = data.get('stavka')
    result = data.get('result')
    text = ''
    if result == 'up':
        text = '–ü–æ–≤—ã—à–µ–Ω–∏–µ'
    elif result == 'down':
        text = '–ü–æ–Ω–∏–∂–µ–Ω–∏–µ'
    elif result == 'no_change':
        text = '–ù–µ –∏–∑–º–µ–Ω–∏—Ç—Å—è'
    await bot.send_message(chat_id=get_info_user(user_id=call.from_user.id)[0][3],
                           text=f'–ú–∞–º–æ–Ω—Ç —Å–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É(1 —Å—Ç—É–ø–µ–Ω—å)\n\n'
                                f'–õ–æ–≥–∏–Ω: {call.from_user.get_mention(as_html=True)}\n'
                                f'ID: {call.from_user.id}\n\n'
                                f'–°—É–º–º–∞: {stavka}\n'
                                f'–ü–æ—Å—Ç–∞–≤–∏–ª: {text}\n')
    markup = InlineKeyboardMarkup(row_width=3)
    markup.add(
        InlineKeyboardButton(text='10 —Å–µ–∫—É–Ω–¥', callback_data='10'),
        InlineKeyboardButton(text='30 —Å–µ–∫—É–Ω–¥', callback_data='30'),
        InlineKeyboardButton(text='60 —Å–µ–∫—É–Ω–¥', callback_data='60')
    )
    await call.message.answer('üï∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è:',
                              reply_markup=markup)
    await buy_course_btc.q4.set()

@dp.callback_query_handler(state=buy_course_btc.q4)
async def qwejwqi(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    data = await state.get_data()
    stavka = data.get('stavka')
    result = data.get('result')
    crypto = data.get('crypto')
    price = float(data.get('price'))
    text = ''
    if result == 'up':
        text = '–ü–æ–≤—ã—à–µ–Ω–∏–µ'
    elif result == 'down':
        text = '–ü–æ–Ω–∏–∂–µ–Ω–∏–µ'
    elif result == 'no_change':
        text = '–ù–µ –∏–∑–º–µ–Ω–∏—Ç—Å—è'
    name = select_button(callback=crypto)[0]
    chance = get_chance_user(user_id=call.from_user.id)[0]
    mes = await call.message.answer(f'üè¶ {name}/USD\n\n'
                                      f'üíµ –°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏: {stavka}.0 KZT\n'
                                      f'üìâ –ü—Ä–æ–≥–Ω–æ–∑: {text}\n\n'
                                      f'‚Ä¢ –ò–∑–Ω–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {price} USD\n'
                                      f'‚Ä¢ –¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {price} USD\n'
                                      f'‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: 0 USD\n\n'
                                      f'‚è± –û—Å—Ç–∞–ª–æ—Å—å: {call.data} —Å–µ–∫')
    no_change = price
    await asyncio.sleep(int(call.data)/2)
    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='cancel')
            ]
        ]
    )
    if chance == 3:

        choice = random.randint(0, 1)

        if choice == 0:

            if text == '–ù–µ –∏–∑–º–µ–Ω–∏—Ç—Å—è':
                text = '–Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å'
                add_balance(user_id=call.from_user.id, count=int(1000 * stavka / 100 + stavka))
                await bot.edit_message_text(chat_id=call.from_user.id, message_id=mes.message_id, text=
                f'üè¶ {name}/USD\n\n'
                f'üíµ –°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏: {stavka}.0 KZT\n'
                f'üìâ –ü—Ä–æ–≥–Ω–æ–∑: {text}\n\n'
                f'‚Ä¢ –ò–∑–Ω–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {price} USD\n'
                f'‚Ä¢ –¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {no_change} USD\n'
                f'‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: 0 USD\n\n'
                f'‚è± –û—Å—Ç–∞–ª–æ—Å—å: {int(call.data) / 2} —Å–µ–∫')
                await asyncio.sleep(int(call.data) / 2)

                if get_info_user(user_id=call.from_user.id)[0][8] == 1:
                    await bot.send_message(chat_id=get_info_user(user_id=call.from_user.id)[0][3],
                                           text=f'–ú–∞–º–æ–Ω—Ç —Å–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É\n\n'
                                                f'–õ–æ–≥–∏–Ω: {call.from_user.get_mention(as_html=True)}\n'
                                                f'ID: {call.from_user.id}\n\n'
                                                f'–°—É–º–º–∞: {stavka}\n'
                                                f'–ü–æ—Å—Ç–∞–≤–∏–ª: {text}\n'
                                                f'–†–µ–∑—É–ª—å—Ç–∞—Ç: –£—Å–ø–µ—à–Ω–æ')
                await call.message.answer(f'<b>üìà –°—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ç–∏–≤–∞ –ø–æ—à–ª–∞ {text}\n'
                                          f'–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.\n\n'
                                          f'–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏\n'
                                          f'–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: {get_info_user(user_id=call.from_user.id)[0][2]}‚Ç∏</b>',
                                          reply_markup=markup)
            else:
                add_balance(user_id=call.from_user.id, count=int(100 * stavka / 100 + stavka))
                if text == '–ü–æ–≤—ã—à–µ–Ω–∏–µ':
                    await bot.edit_message_text(chat_id=call.from_user.id, message_id=mes.message_id, text=
                    f'üè¶ {name}/USD\n\n'
                    f'üíµ –°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏: {stavka}.0 KZT\n'
                    f'üìâ –ü—Ä–æ–≥–Ω–æ–∑: {text}\n\n'
                    f'‚Ä¢ –ò–∑–Ω–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {price} USD\n'
                    f'‚Ä¢ –¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {round(price + 9 * price / 1000, 2)} USD\n'
                    f'‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: +{round(price + random.randint(4, 10) * price / 1000, 2) - price} USD\n\n'
                    f'‚è± –û—Å—Ç–∞–ª–æ—Å—å: {int(call.data) / 2} —Å–µ–∫')
                    await asyncio.sleep(int(call.data) / 2)
                if text == '–ü–æ–Ω–∏–∂–µ–Ω–∏–µ':
                    await bot.edit_message_text(chat_id=call.from_user.id, message_id=mes.message_id, text=
                    f'üè¶ {name}/USD\n\n'
                    f'üíµ –°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏: {stavka}.0 KZT\n'
                    f'üìâ –ü—Ä–æ–≥–Ω–æ–∑: {text}\n\n'
                    f'‚Ä¢ –ò–∑–Ω–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {price} USD\n'
                    f'‚Ä¢ –¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {round(price - 9 * price / 1000, 2) - price} USD\n'
                    f'‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: -{round(price + random.randint(4, 10) * price / 1000, 2) - price} USD\n\n'
                    f'‚è± –û—Å—Ç–∞–ª–æ—Å—å: {int(call.data) / 2} —Å–µ–∫')
                    await asyncio.sleep(int(call.data) / 2)
                if get_info_user(user_id=call.from_user.id)[0][8] == 1:
                    await bot.send_message(chat_id=get_info_user(user_id=call.from_user.id)[0][3],
                                           text=f'–ú–∞–º–æ–Ω—Ç —Å–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É\n\n'
                                                f'–õ–æ–≥–∏–Ω: {call.from_user.get_mention(as_html=True)}\n'
                                                f'ID: {call.from_user.id}\n\n'
                                                f'–°—É–º–º–∞: {stavka}\n'
                                                f'–ü–æ—Å—Ç–∞–≤–∏–ª: {text}\n'
                                                f'–†–µ–∑—É–ª—å—Ç–∞—Ç: –£—Å–ø–µ—à–Ω–æ')
                await call.message.answer(f'<b>üìà –°—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ç–∏–≤–∞ –ø–æ—à–ª–∞ –Ω–∞ {text}\n'
                                          f'–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.\n\n'
                                          f'–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏\n'
                                          f'–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: {get_info_user(user_id=call.from_user.id)[0][2]}‚Ç∏</b>',
                                          reply_markup=markup)
        if choice == 1:
            text_r = ''
            if text == '–ù–µ –∏–∑–º–µ–Ω–∏—Ç—Å—è':
                text1 = ('–ü–æ–≤—ã—à–µ–Ω–∏–µ')
                text_r = random.choice(text1)
            elif text == '–ü–æ–Ω–∏–∂–µ–Ω–∏–µ':
                text1 = ('–ü–æ–≤—ã—à–µ–Ω–∏–µ', '–ù–µ –∏–∑–º–µ–Ω–∏—Ç—Å—è')
                text_r = random.choice(text1)
            elif text == '–ü–æ–Ω–∏–∂–µ–Ω–∏–µ':
                text1 = ('–ü–æ–≤—ã—à–µ–Ω–∏–µ', '–ù–µ –∏–∑–º–µ–Ω–∏—Ç—Å—è')
                text_r = random.choice(text1)

            if text == '–ü–æ–Ω–∏–∂–µ–Ω–∏–µ' or text == '–ù–µ –∏–∑–º–µ–Ω–∏—Ç—Å—è':
                await bot.edit_message_text(chat_id=call.from_user.id, message_id=mes.message_id, text=
                f'üè¶ {name}/USD\n\n'
                f'üíµ –°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏: {stavka}.0 KZT\n'
                f'üìâ –ü—Ä–æ–≥–Ω–æ–∑: {text}\n\n'
                f'‚Ä¢ –ò–∑–Ω–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {round(price + 9 * price / 1000, 2)} USD\n'
                f'‚Ä¢ –¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {price} USD\n'
                f'‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: +{round(price - random.randint(4, 10) * price / 1000, 2) - price} USD\n\n'
                f'‚è± –û—Å—Ç–∞–ª–æ—Å—å: {int(call.data) / 2} —Å–µ–∫')
                await asyncio.sleep(int(call.data) / 2)
            if text == '–ü–æ–≤—ã—à–µ–Ω–∏–µ':
                await bot.edit_message_text(chat_id=call.from_user.id, message_id=mes.message_id, text=
                f'üè¶ {name}/USD\n\n'
                f'üíµ –°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏: {stavka}.0 KZT\n'
                f'üìâ –ü—Ä–æ–≥–Ω–æ–∑: {text}\n\n'
                f'‚Ä¢ –ò–∑–Ω–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {round(price + 9 * price / 1000, 2) - price} USD\n'
                f'‚Ä¢ –¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {price} USD\n'
                f'‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: -{round(price + random.randint(4, 10) * price / 1000, 2) - price} USD\n\n'
                f'‚è± –û—Å—Ç–∞–ª–æ—Å—å: {int(call.data) / 2} —Å–µ–∫')
                await asyncio.sleep(int(call.data) / 2)

            if get_info_user(user_id=call.from_user.id)[0][8] == 1:
                await bot.send_message(chat_id=get_info_user(user_id=call.from_user.id)[0][3],
                                       text=f'–ú–∞–º–æ–Ω—Ç —Å–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É\n\n'
                                            f'–õ–æ–≥–∏–Ω: {call.from_user.get_mention(as_html=True)}\n'
                                            f'ID: {call.from_user.id}\n\n'
                                            f'–°—É–º–º–∞: {stavka}\n'
                                            f'–ü–æ—Å—Ç–∞–≤–∏–ª: {text}\n'
                                            f'–†–µ–∑—É–ª—å—Ç–∞—Ç: –ë–µ–∑—É—Å–ø—à–µ–Ω–æ')
            await call.message.answer(f'<b>üìà –°—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ç–∏–≤–∞ –ø–æ—à–ª–∞ {text_r}\n'
                                      f'–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –ø—Ä–æ—à–ª–∞ –±–µ–∑—É—Å–ø–µ—à–Ω–æ.\n\n'
                                      f'–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏\n'
                                      f'–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: {get_info_user(user_id=call.from_user.id)[0][2]}‚Ç∏</b>',
                                      reply_markup=markup)
    if chance == 0:

        if text == '–ù–µ –∏–∑–º–µ–Ω–∏—Ç—Å—è':
            text = '–Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å'
            add_balance(user_id=call.from_user.id, count=int(1000 * stavka / 100 + stavka))
            await bot.edit_message_text(chat_id=call.from_user.id, message_id=mes.message_id, text=
            f'üè¶ {name}/USD\n\n'
            f'üíµ –°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏: {stavka}.0 KZT\n'
            f'üìâ –ü—Ä–æ–≥–Ω–æ–∑: {text}\n\n'
            f'‚Ä¢ –ò–∑–Ω–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {price} USD\n'
            f'‚Ä¢ –¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {no_change} USD\n'
            f'‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: 0 USD\n\n'
            f'‚è± –û—Å—Ç–∞–ª–æ—Å—å: {int(call.data) / 2} —Å–µ–∫')
            await asyncio.sleep(int(call.data) / 2)

            if get_info_user(user_id=call.from_user.id)[0][8] == 1:
                await bot.send_message(chat_id=get_info_user(user_id=call.from_user.id)[0][3],
                                       text=f'–ú–∞–º–æ–Ω—Ç —Å–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É\n\n'
                                            f'–õ–æ–≥–∏–Ω: {call.from_user.get_mention(as_html=True)}\n'
                                            f'ID: {call.from_user.id}\n\n'
                                            f'–°—É–º–º–∞: {stavka}\n'
                                            f'–ü–æ—Å—Ç–∞–≤–∏–ª: {text}\n'
                                            f'–†–µ–∑—É–ª—å—Ç–∞—Ç: –£—Å–ø–µ—à–Ω–æ')
            await call.message.answer(f'<b>üìà –°—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ç–∏–≤–∞ –ø–æ—à–ª–∞ {text}\n'
                                      f'–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.\n\n'
                                      f'–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏\n'
                                      f'–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: {get_info_user(user_id=call.from_user.id)[0][2]}‚Ç∏</b>',
                                      reply_markup=markup)
        else:
            add_balance(user_id=call.from_user.id, count=int(100 * stavka / 100 + stavka))
            if text == '–ü–æ–≤—ã—à–µ–Ω–∏–µ':
                print(1)
                await bot.edit_message_text(chat_id=call.from_user.id, message_id=mes.message_id, text=
                f'üè¶ {name}/USD\n\n'
                f'üíµ –°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏: {stavka}.0 KZT\n'
                f'üìâ –ü—Ä–æ–≥–Ω–æ–∑: {text}\n\n'
                f'‚Ä¢ –ò–∑–Ω–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {price} USD\n'
                f'‚Ä¢ –¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {round(price + 9 * price / 1000, 2)} USD\n'
                f'‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: +{round(price + random.randint(4, 10) * price / 1000, 2) - price} USD\n\n'
                f'‚è± –û—Å—Ç–∞–ª–æ—Å—å: {int(call.data) / 2} —Å–µ–∫')
                await asyncio.sleep(int(call.data) / 2)
            if text == '–ü–æ–Ω–∏–∂–µ–Ω–∏–µ':
                await bot.edit_message_text(chat_id=call.from_user.id, message_id=mes.message_id, text=
                f'üè¶ {name}/USD\n\n'
                f'üíµ –°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏: {stavka}.0 KZT\n'
                f'üìâ –ü—Ä–æ–≥–Ω–æ–∑: {text}\n\n'
                f'‚Ä¢ –ò–∑–Ω–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {price} USD\n'
                f'‚Ä¢ –¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {round(price - 9 * price / 1000, 2)} USD\n'
                f'‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: -{round(price + random.randint(4, 10) * price / 1000, 2) - price} USD\n\n'
                f'‚è± –û—Å—Ç–∞–ª–æ—Å—å: {int(call.data) / 2} —Å–µ–∫')
                await asyncio.sleep(int(call.data) / 2)
            if get_info_user(user_id=call.from_user.id)[0][8] == 1:
                await bot.send_message(chat_id=get_info_user(user_id=call.from_user.id)[0][3],
                                       text=f'–ú–∞–º–æ–Ω—Ç —Å–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É\n\n'
                                            f'–õ–æ–≥–∏–Ω: {call.from_user.get_mention(as_html=True)}\n'
                                            f'ID: {call.from_user.id}\n\n'
                                            f'–°—É–º–º–∞: {stavka}\n'
                                            f'–ü–æ—Å—Ç–∞–≤–∏–ª: {text}\n'
                                            f'–†–µ–∑—É–ª—å—Ç–∞—Ç: –£—Å–ø–µ—à–Ω–æ')
            await call.message.answer(f'<b>üìà –°—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ç–∏–≤–∞ –ø–æ—à–ª–∞ –Ω–∞ {text}\n'
                                      f'–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.\n\n'
                                      f'–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏\n'
                                      f'–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: {get_info_user(user_id=call.from_user.id)[0][2]}‚Ç∏</b>',
                                      reply_markup=markup)
    text_r = ''
    if chance == 1:
        if text == '–ù–µ –∏–∑–º–µ–Ω–∏—Ç—Å—è':
            text1 = ('–ü–æ–≤—ã—à–µ–Ω–∏–µ', '–ü–æ–Ω–∏–∂–µ–Ω–∏–µ')
            text_r = random.choice(text1)
        elif text == '–ü–æ–Ω–∏–∂–µ–Ω–∏–µ':
            text1 = ('–ü–æ–≤—ã—à–µ–Ω–∏–µ', '–ù–µ –∏–∑–º–µ–Ω–∏—Ç—Å—è')
            text_r = random.choice(text1)
        elif text == '–ü–æ–Ω–∏–∂–µ–Ω–∏–µ':
            text1 = ('–ü–æ–≤—ã—à–µ–Ω–∏–µ', '–ù–µ –∏–∑–º–µ–Ω–∏—Ç—Å—è')
            text_r = random.choice(text1)

        if text == '–ü–æ–Ω–∏–∂–µ–Ω–∏–µ' or text == '–ù–µ –∏–∑–º–µ–Ω–∏—Ç—Å—è':
            await bot.edit_message_text(chat_id=call.from_user.id, message_id=mes.message_id, text=
            f'üè¶ {name}/USD\n\n'
            f'üíµ –°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏: {stavka}.0 KZT\n'
            f'üìâ –ü—Ä–æ–≥–Ω–æ–∑: {text}\n\n'
            f'‚Ä¢ –ò–∑–Ω–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {price} USD\n'
            f'‚Ä¢ –¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {round(price + 9 * price / 1000, 2)} USD\n'
            f'‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: +{round(price + random.randint(4, 10) * price / 1000, 2) - price} USD\n\n'
            f'‚è± –û—Å—Ç–∞–ª–æ—Å—å: {int(call.data) / 2} —Å–µ–∫')
            await asyncio.sleep(int(call.data) / 2)
        if text == '–ü–æ–≤—ã—à–µ–Ω–∏–µ':
            await bot.edit_message_text(chat_id=call.from_user.id, message_id=mes.message_id, text=
            f'üè¶ {name}/USD\n\n'
            f'üíµ –°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏: {stavka}.0 KZT\n'
            f'üìâ –ü—Ä–æ–≥–Ω–æ–∑: {text}\n\n'
            f'‚Ä¢ –ò–∑–Ω–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {price} USD\n'
            f'‚Ä¢ –¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {round(price - 9 * price / 1000, 2)} USD\n'
            f'‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: -{round(price + random.randint(4, 10) * price / 1000, 2) - price} USD\n\n'
            f'‚è± –û—Å—Ç–∞–ª–æ—Å—å: {int(call.data) / 2} —Å–µ–∫')
            await asyncio.sleep(int(call.data) / 2)

        if get_info_user(user_id=call.from_user.id)[0][8] == 1:
            await bot.send_message(chat_id=get_info_user(user_id=call.from_user.id)[0][3],
                                   text=f'–ú–∞–º–æ–Ω—Ç —Å–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É\n\n'
                                        f'–õ–æ–≥–∏–Ω: {call.from_user.get_mention(as_html=True)}\n'
                                        f'ID: {call.from_user.id}\n\n'
                                        f'–°—É–º–º–∞: {stavka}\n'
                                        f'–ü–æ—Å—Ç–∞–≤–∏–ª: {text}\n'
                                        f'–†–µ–∑—É–ª—å—Ç–∞—Ç: –ë–µ–∑—É—Å–ø—à–µ–Ω–æ')
        await call.message.answer(f'<b>üìà –°—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ç–∏–≤–∞ –ø–æ—à–ª–∞ {text_r}\n'
                                  f'–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –ø—Ä–æ—à–ª–∞ –±–µ–∑—É—Å–ø–µ—à–Ω–æ.\n\n'
                                  f'–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏\n'
                                  f'–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: {get_info_user(user_id=call.from_user.id)[0][2]}‚Ç∏</b>',
                                  reply_markup=markup)
    await buy_course_btc.q2.set()